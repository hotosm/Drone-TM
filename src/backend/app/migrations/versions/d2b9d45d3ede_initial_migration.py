"""Initial migration.

Revision ID: d2b9d45d3ede
Revises:
Create Date: 2024-07-02 08:49:59.721468

"""

from typing import Sequence, Union
import geoalchemy2
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "d2b9d45d3ede"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "drones",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("model", sa.String(), nullable=False),
        sa.Column("manufacturer", sa.String(), nullable=True),
        sa.Column("camera_model", sa.String(), nullable=True),
        sa.Column("sensor_width", sa.Float(), nullable=True),
        sa.Column("sensor_height", sa.Float(), nullable=True),
        sa.Column("max_battery_health", sa.Integer(), nullable=True),
        sa.Column("focal_length", sa.Float(), nullable=True),
        sa.Column("image_width", sa.Integer(), nullable=True),
        sa.Column("image_height", sa.Integer(), nullable=True),
        sa.Column("max_altitude", sa.Integer(), nullable=True),
        sa.Column("max_speed", sa.Float(), nullable=True),
        sa.Column("weight", sa.Integer(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("model"),
    )
    op.create_table(
        "organisations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=512), nullable=False),
        sa.Column("slug", sa.String(length=255), nullable=False),
        sa.Column("logo", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("url", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        sa.UniqueConstraint("slug"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("is_superuser", sa.Boolean(), nullable=True),
        sa.Column("profile_img", sa.String(), nullable=True),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("email_address", sa.String(), nullable=False),
        sa.Column(
            "role",
            sa.Enum("PROJECT_CREATOR", "DRONE_PILOT", "BOTH", name="userrole"),
            nullable=True,
        ),
        sa.Column("date_registered", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email_address"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "projects",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("short_description", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("per_task_instructions", sa.String(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("last_updated", sa.DateTime(), nullable=True),
        sa.Column(
            "outline",
            geoalchemy2.types.Geometry(
                geometry_type="POLYGON",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column(
            "centroid",
            geoalchemy2.types.Geometry(
                geometry_type="POINT",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column(
            "no_fly_zones",
            geoalchemy2.types.Geometry(
                geometry_type="POLYGON",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column("organisation_id", sa.Integer(), nullable=True),
        sa.Column("gsd", sa.Float(), nullable=True),
        sa.Column("camera_bearings", sa.ARRAY(sa.SmallInteger()), nullable=True),
        sa.Column("gimble_angles", sa.ARRAY(sa.SmallInteger()), nullable=True),
        sa.Column("is_terrain_follow", sa.Boolean(), nullable=True),
        sa.Column("dem_url", sa.String(), nullable=False),
        sa.Column("hashtags", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("output_orthophoto_url", sa.String(), nullable=True),
        sa.Column("output_pointcloud_url", sa.String(), nullable=True),
        sa.Column("author_id", sa.String(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("ARCHIVED", "PUBLISHED", "DRAFT", name="projectstatus"),
            nullable=False,
        ),
        sa.Column(
            "visibility",
            sa.Enum("PUBLIC", "PRIVATE", "INVITE_ONLY", name="projectvisibility"),
            nullable=False,
        ),
        sa.Column(
            "task_split_type",
            sa.Enum(
                "DIVIDE_ON_SQUARE",
                "CHOOSE_AREA_AS_TASK",
                "TASK_SPLITTING_ALGORITHM",
                name="tasksplittype",
            ),
            nullable=True,
        ),
        sa.Column("task_split_dimension", sa.SmallInteger(), nullable=True),
        sa.Column("total_tasks", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["author_id"], ["users.id"], name="fk_users"),
        sa.ForeignKeyConstraint(
            ["organisation_id"], ["organisations.id"], name="fk_organisations"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_geometry", "projects", ["outline"], unique=False, postgresql_using="gist"
    )
    # op.create_index('idx_projects_centroid', 'projects', ['centroid'], unique=False, postgresql_using='gist')
    # op.create_index('idx_projects_no_fly_zones', 'projects', ['no_fly_zones'], unique=False, postgresql_using='gist')
    # op.create_index('idx_projects_outline', 'projects', ['outline'], unique=False, postgresql_using='gist')
    op.create_index(
        op.f("ix_projects_organisation_id"),
        "projects",
        ["organisation_id"],
        unique=False,
    )
    op.create_table(
        "tasks",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("project_id", sa.UUID(), nullable=False),
        sa.Column("project_task_index", sa.Integer(), nullable=True),
        sa.Column(
            "outline",
            geoalchemy2.types.Geometry(
                geometry_type="POLYGON",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column(
            "task_status",
            sa.Enum(
                "READY",
                "LOCKED_FOR_MAPPING",
                "MAPPED",
                "LOCKED_FOR_VALIDATION",
                "VALIDATED",
                "INVALIDATED",
                "BAD",
                "SPLIT",
                name="taskstatus",
            ),
            nullable=True,
        ),
        sa.Column("locked_by", sa.String(), nullable=True),
        sa.Column("mapped_by", sa.String(), nullable=True),
        sa.Column("validated_by", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["locked_by"], ["users.id"], name="fk_users_locked"),
        sa.ForeignKeyConstraint(["mapped_by"], ["users.id"], name="fk_users_mapper"),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["projects.id"],
        ),
        sa.ForeignKeyConstraint(
            ["validated_by"], ["users.id"], name="fk_users_validator"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # op.create_index('idx_tasks_outline', 'tasks', ['outline'], unique=False, postgresql_using='gist')
    op.create_index(op.f("ix_tasks_locked_by"), "tasks", ["locked_by"], unique=False)
    op.create_index(op.f("ix_tasks_mapped_by"), "tasks", ["mapped_by"], unique=False)
    op.create_index(
        op.f("ix_tasks_validated_by"), "tasks", ["validated_by"], unique=False
    )
    op.create_table(
        "drone_flights",
        sa.Column("flight_id", sa.UUID(), nullable=False),
        sa.Column("drone_id", sa.Integer(), nullable=False),
        sa.Column("task_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.String(length=100), nullable=False),
        sa.Column("flight_start", sa.DateTime(), nullable=True),
        sa.Column("flight_end", sa.DateTime(), nullable=True),
        sa.Column(
            "user_estimated_battery_time_minutes", sa.SmallInteger(), nullable=True
        ),
        sa.Column(
            "override_camera_bearings", sa.ARRAY(sa.SmallInteger()), nullable=True
        ),
        sa.Column(
            "override_gimble_angles_degrees", sa.ARRAY(sa.SmallInteger()), nullable=True
        ),
        sa.Column(
            "override_height_from_ground_meters", sa.SmallInteger(), nullable=True
        ),
        sa.Column("override_image_overlap_percent", sa.SmallInteger(), nullable=True),
        sa.Column("waypoint_file", sa.LargeBinary(), nullable=True),
        sa.Column("imagery_data_url", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["drone_id"],
            ["drones.id"],
        ),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["tasks.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("flight_id"),
    )
    op.create_table(
        "task_events",
        sa.Column("event_id", sa.UUID(), nullable=False),
        sa.Column("project_id", sa.UUID(), nullable=False),
        sa.Column("task_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.String(length=100), nullable=False),
        sa.Column("detail", sa.String(), nullable=True),
        sa.Column(
            "state",
            sa.Enum(
                "READY",
                "LOCKED_FOR_MAPPING",
                "MAPPED",
                "LOCKED_FOR_VALIDATION",
                "VALIDATED",
                "INVALIDATED",
                "BAD",
                "SPLIT",
                name="taskstatus",
            ),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["projects.id"],
        ),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["tasks.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("event_id"),
    )
    op.create_index(
        "idx_task_event_composite",
        "task_events",
        ["task_id", "project_id"],
        unique=False,
    )
    op.create_index(
        "idx_task_event_project_id_user_id",
        "task_events",
        ["user_id", "project_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_task_event_project_id_user_id", table_name="task_events")
    op.drop_index("idx_task_event_composite", table_name="task_events")
    op.drop_table("task_events")
    op.drop_table("drone_flights")
    op.drop_index(op.f("ix_tasks_validated_by"), table_name="tasks")
    op.drop_index(op.f("ix_tasks_mapped_by"), table_name="tasks")
    op.drop_index(op.f("ix_tasks_locked_by"), table_name="tasks")
    # op.drop_index('idx_tasks_outline', table_name='tasks', postgresql_using='gist')
    op.drop_table("tasks")
    op.drop_index(op.f("ix_projects_organisation_id"), table_name="projects")
    # op.drop_index('idx_projects_outline', table_name='projects', postgresql_using='gist')
    # op.drop_index('idx_projects_no_fly_zones', table_name='projects', postgresql_using='gist')
    # op.drop_index('idx_projects_centroid', table_name='projects', postgresql_using='gist')
    op.drop_index("idx_geometry", table_name="projects", postgresql_using="gist")
    op.drop_table("projects")
    op.drop_table("users")
    op.drop_table("organisations")
    op.drop_table("drones")
    # ### end Alembic commands ###
